package comsockstests;

import comsocksapi.ProjectConfig;
import comsocksapi.conditions.Conditions;
import comsocksapi.payloads.PaymentPayload;
import comsocksapi.payloads.PaymentPayloadCard;
import comsocksapi.services.PaymentApiService;
import comsocksapi.services.UserApiServices;
import io.qameta.allure.Allure;
import io.qameta.allure.Description;
import org.aeonbits.owner.ConfigFactory;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class PaymentsTest {

    private ProjectConfig config = ConfigFactory.create(ProjectConfig.class, System.getProperties());
    private PaymentApiService payment = new PaymentApiService(config.paymentBaseURL());
    private UserApiServices userApiServices = new UserApiServices(config.authBaseURL());
    private String authToken;

    @BeforeAll
    public void setup() {
        Allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", () -> {
            authToken = userApiServices.getAuthToken("aozerova1234@gmail.com", "jChZV2wnGJ8Ufxh");
            Allure.addAttachment("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "text/plain", authToken);
        });
    }

    @Test
    @Description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ 2 + 2 = 4")
    public void testCanCreatePayment() {

        // üîπ –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –î–û —à–∞–≥–æ–≤
        PaymentPayloadCard payloadCard = new PaymentPayloadCard()
                .cardNumber("4242424242424242")
                .cardHolder("dfgdfg hfghf")
                .expirationDate("12/25")
                .securityCode(123);

        PaymentPayload payload = new PaymentPayload()
                .movieId(2143)
                .amount(1)
                .card(payloadCard);

        // üü¢ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
        Allure.step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã", () -> {
            Allure.addAttachment("–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", "application/json", payloadCard.toString());
        });

        // üü¢ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ –ø–ª–∞—Ç–µ–∂–∞
        Allure.step("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ –ø–ª–∞—Ç–µ–∂–∞", () -> {
            Allure.addAttachment("–¢–µ–ª–æ –ø–ª–∞—Ç–µ–∂–∞", "application/json", payload.toString());
        });

        // üü¢ –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        Allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–æ–∫–µ–Ω–æ–º " + authToken.substring(0, 8) + "...", () -> {
            payment.payment(payload, authToken)
                    .soudHave(Conditions.statusCode(201));

            Allure.addAttachment("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", "text/plain", "Authorization: Bearer " + authToken);
        });
    }
}